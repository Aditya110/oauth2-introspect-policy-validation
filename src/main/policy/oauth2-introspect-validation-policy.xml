<?xml version="1.0" encoding="UTF-8"?>
<policy 
    xmlns="http://www.mulesoft.org/schema/mule/policy" 
    xmlns:http="http://www.mulesoft.org/schema/mule/http"
    xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
    policyName="OAuth 2.0 Access Token Introspection Policy"
    xmlns:mule="http://www.mulesoft.org/schema/mule/core"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:api-platform-gw="http://www.mulesoft.org/schema/mule/api-platform-gw"
    xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
    xmlns:json="http://www.mulesoft.org/schema/mule/json"
    xsi:schemaLocation="http://www.mulesoft.org/schema/mule/policy http://www.mulesoft.org/schema/mule/policy/current/mule-policy.xsd
                        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
                        http://www.mulesoft.org/schema/mule/api-platform-gw http://www.mulesoft.org/schema/mule/api-platform-gw/current/mule-api-platform-gw.xsd
                        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
                        http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
                        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd">
   <!--  can't get id={{policyId}} to work. Eclipse complains! -->
    <!--
        Based on the sample custom policy and the JWT validation policy (https://github.com/mulesoft/api-policies/tree/master/jwt-validation-policy)

        The policy has these configuration parameters (see the YAML file):
        - introspectHost,Port,Uri: RFC 7662 introspect endpoint
        All other RFC 6749 endpoints are defined in the RAML for the given app being protected.
        It is important that the introspect endpoint be coordinated with them.

        For more information about creating custom policies see:
        https://docs.mulesoft.com/api-manager/creating-a-policy-walkthrough
        and
        https://docs.mulesoft.com/api-manager/applying-custom-policies
    -->

    <pointcut>
        <api-platform-gw:api-pointcut apiName="{{ apiName }}" apiVersion="{{ apiVersionName }}"/>
    </pointcut>
    
	<!-- XXX TODO: Add http vs. https, try to parse the introspectUri into components so the user of this policy doesn't have to. -->
    <!-- This works with {{introspectPort}} but Eclipse complains that it's not an integer. -->
    <http:request-config name="http-request-config" host="{{introspectHost}}" port="{{introspectPort}}" doc:name="HTTP Request Configuration"/>

 	<!-- Response messages in case of rejecting a message -->
    <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="authorizationHeaderViolation">
		<mule:logger message="Policy {{ policyId }} filtered the message #[message.getId()] based on OAuth 2.0 Authorization header validation" level="DEBUG" />     
		<mule:set-property propertyName="http.status" value="403"/>    
		<mule:set-property propertyName="Content-Type" value="application/json"/>
		<mule:set-payload value='{ "error" : "Policy {{ policyId }}: Authorization header is missing or not of type Bearer access_token."}'/>
    </mule:processor-chain>

    <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="invalidScopeViolation">
		<mule:logger message="Policy {{ policyId }} filtered the message #[message.getId()] based on OAuth 2.0 scope validation" level="DEBUG" />     
		<mule:set-property propertyName="http.status" value="403"/>    
		<mule:set-property propertyName="Content-Type" value="application/json"/>
		<mule:set-payload value='{ "error" : "Policy {{ policyId }}: Access Token does not have the required scope {{scope}}."}'/>
    </mule:processor-chain>
 
    <mule:processor-chain xmlns:mule="http://www.mulesoft.org/schema/mule/core" name="clientParameterViolation">
		<mule:set-property propertyName="http.status" value="403"/>    
		<mule:set-property propertyName="Content-Type" value="application/json"/>
		<mule:set-payload value='{ "error" : "Policy {{ policyId }}: The message does not contain the client_id and/or client_secret parameters"}'/>
    </mule:processor-chain>       

    <before>
		<!-- Validate headers and parameters -->
        <mule:logger message="Policy {{ policyId }} applying 'message.inboundProperties.'Authorization' filter" level="DEBUG" />        
        <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="authorizationHeaderViolation">
			<mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[message.inboundProperties.'Authorization' != null]" name="AuthorizationHeaderFilter"/>
        </mule:message-filter>
        <!-- TODO: combine these into one statement -->                
        <!-- continue only if the Authorization header value has a valid format -->     
        <mule:logger message="Policy {{ policyId }} applying 'message.inboundProperties.'Authorization'.startsWith('Bearer ')' filter" level="DEBUG" />        
        <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="authorizationHeaderViolation">
			<mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[message.inboundProperties.'Authorization'.startsWith('Bearer ')]" name="AuthorizationHeaderFormatFilter"/>
        </mule:message-filter>
        <mule:set-variable variableName="access_token" value="#[message.inboundProperties.'Authorization'.substring(message.inboundProperties.'Authorization'.indexOf(' ') + 1)]" />
        <mule:logger message="Access token is #[flowVars.'access_token']" level="DEBUG" />
        <mule:logger message="Policy {{ policyId }} applying client_id != null filter" level="DEBUG" />        
        <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="clientParameterViolation">
			<mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[message.inboundProperties.'http.query.params'.client_id != null]" name="clientIdFilter"/>
        </mule:message-filter>
        <mule:set-variable variableName="client_id" value="#[message.inboundProperties.'http.query.params'.client_id]" />
        <mule:logger message="Policy {{ policyId }} applying client_secret != null filter" level="DEBUG" />                
        <mule:message-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" onUnaccepted="clientParameterViolation">
			<mule:expression-filter xmlns:mule="http://www.mulesoft.org/schema/mule/core" expression="#[message.inboundProperties.'http.query.params'.client_secret != null]" name="clientSecretFilter"/>
        </mule:message-filter>
        <mule:set-variable variableName="authn" value="#[message.inboundProperties.'http.query.params'.client_id]:#[message.inboundProperties.'http.query.params'.client_secret]" />
        <mule:set-variable variableName="Authorization" value="Basic #[java.util.Base64.getEncoder().encodeToString(flowVars.'authn'.getBytes())]" />

        <mule:logger message="Policy {{ policyId }} access_token=#[flowVars.'access_token'] authn=#[flowVars.'authn'] Authorization=#[flowVars.'Authorization']" level="DEBUG" />
        <!-- now actually do something useful 
        	Invoke the introspect endpoint with HTTP Basc Auth(client_id:client_secret) for the Authorization header
        	and query parameter 'token=<access_token>'   
        -->
        <mule:logger message="Policy {{ policyId }} invoking introspectUri: {{introspectHost}}:{{introspectPort}}/{{introspectPath}}" level="DEBUG" />
        <!-- See https://forums.mulesoft.com/questions/2466/is-it-possible-to-call-a-rest-service-from-custom-policy-of-anypoint-platform.html -->     
     	<mule:enricher target="flowVars.'introspect_response'">
       		<mule:processor-chain>
       		    <http:request config-ref="http-request-config" path="{{introspectPath}}" method="POST">
     		        <http:request-builder>
	          		    <http:query-param paramName="token" value="#[flowVars.'access_token']" />
   		                <http:header headerName="Authorization" value="#[flowVars.'Authorization']" /> 
       		    	</http:request-builder>	
       		    </http:request>
       		    <mule:object-to-string-transformer doc:name="Object to String"/>
       		    <mule:logger message="payload: #[payload] intro: #[flowVars.'introspect_response']" level="DEBUG" />
                <mule:logger level="DEBUG"/>	
       		</mule:processor-chain>
     	</mule:enricher>
     	<mule:logger message="Introspect response: #[flowVars.'introspect_response']" level="DEBUG"/>        	
		<!-- set X-AGW-* headers based on observed (undocumented) behavior of Mulesoft's OAuth 2.0 validation policy -->
	    <mule:set-property propertyName="X-AGW-introspect" value="#[flowVars.'introspect_response']" />
		<!-- I couldn't figure out how to do this in "native" Mule-speak. Python is my hammer: -->
		<!-- does this clobber the payload? -->		
	    <scripting:component>
             <scripting:script engine="jython"><![CDATA[
# Set an X-AGW- header for each key and value present in the map returned by the introspect endpoint
import json
r = message.getProperty('X-AGW-introspect')
map=json.loads(r)
for key in map:
  #print("Key: %s type: %s Value: %s"%(key,type(key),map[key]))
  k = 'X-AGW-'+key  # apparently can't pass an immutable string as the key
  message.setOutboundProperty(k,map[key])
]]>
        	</scripting:script>
        </scripting:component>

		<!-- XXX TODO: compare scopes, etc? -->


        <!-- clean up variables, properties, etc. not needed by downstream flow -->
        
    </before>
    
    <!-- The following provides a custom trait to the RAML of the API if it uses APIkit. Otherwise it is ignored. -->
	<!-- Copied this from the generic OAuth2 policy -->
<!--  DEBUG THIS LATER; it was throwing a parse error   <raml-security-scheme id="oauth_2.0"><![CDATA[
      description: |
        This API supports OAuth 2.0 and OpenID Connect 1.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        headers:
          Authorization:
            description: |
               Used to send a valid OAuth 2 access token. Do not use with the "access_token" query
               string parameter.
            type: string
        queryParameters:
          access_token:
            description: |
               Used to send a valid OAuth 2 access token. Do not use together with the "Authorization"
               header
            type: string
        responses:
          401:
            description: |
              Bad or expired token. This can happen if the user or the API revoked or expired an
              access token. To fix, you should re-authenticate the user.
          403:
            description: |
              Bad OAuth request (wrong consumer key, bad nonce, expired timestamp...). Unfortunately,
              re-authenticating the user won't help here.
      settings:
        authorizationUri: INSERT_OAUTH2_AUTHORIZATION_URI
        accessTokenUri: INSERT_OAUTH2_ACCESS_TOKEN_URI
        authorizationGrants: INSERT_OAUTH2_AUTHORIZATION_GRANTS
    ]]></raml-security-scheme>
 -->
    <after>
        <mule:set-property propertyName="Custom-Header" value="Oauth 2.0 Introspect Policy" />
        <!-- add X-agw-scope, etc. headers here? -->
    </after>

</policy>